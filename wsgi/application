#@+leo-ver=5-thin
#@+node:2014pythonE.20140410091619.2086: * @file application
#@@language python
#@@tabwidth -4
#@+others
#@+node:2014pythonE.20140410091619.2087: ** buddha declarations

########################### 1. 導入所需模組
import cherrypy
import os
import json
# for index 分頁使用
import math

########################### 2. 設定近端與遠端目錄
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
file_location = "/static/buddha/"
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    download_root_dir = os.environ['OPENSHIFT_DATA_DIR']
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
else:
    # 表示程式在近端執行
    download_root_dir = _curdir + "/local_data/"
    data_dir = _curdir + "/local_data/"

#@+node:no28.20140419141724.1984: ** access_list
def access_list(mylist, starti, endi):
    outstring = ""
    for num in range(int(starti)-1, int(endi)):
        outstring += "<a href=\"/content?path="+str(mylist[num][0])+"&filename="+str(mylist[num][1])+"\">"+str(mylist[num][2])+"</a><br /><br />"
    return outstring
#@+node:2014pythonE.20140410091619.2088: ** class Buddha
########################### 3. 建立主物件
class Buddha(object):
    _cp_config = {
    # if there is no utf-8 encoding, no Chinese input available
    'tools.encode.encoding': 'utf-8',
    'tools.sessions.on' : True,
    'tools.sessions.storage_type' : 'file',
    'tools.sessions.locking' : 'explicit',
    'tools.sessions.storage_path' : data_dir+'/tmp',
    # session timeout is 60 minutes
    'tools.sessions.timeout' : 60
    }
    
    #@+others
    #@+node:2014pythonE.20140410091619.2356: *3* __init__
    def __init__(self):
        # hope to create downloads, images and tmp directories　
        if not os.path.isdir(download_root_dir+"downloads"):
            try:
                os.makedirs(download_root_dir+"downloads")
            except:
                print("mkdir error")
        if not os.path.isdir(download_root_dir+"images"):
            try:
                os.makedirs(download_root_dir+"images")
            except:
                print("mkdir error")
        if not os.path.isdir(download_root_dir+"tmp"):
            try:
                os.makedirs(download_root_dir+"tmp")
            except:
                print("mkdir error")


    #@+node:no28.20140419141724.1982: *3* index
    @cherrypy.expose
    def index(self, item_per_page=10, page=1, *args, **kwargs):
        outstring = ""
        # we need to walk the directory to get all the file names
        mylist = self.walkdir()
        total = len(mylist)
        '''
        # 原先無分頁傳送
        for num in range(total):
            outstring += "<a href=\"/content?path="+str(mylist[num][0])+"&filename="+str(mylist[num][1])+"\">"+str(mylist[num][2])+"</a><br /><br />"
        return outstring
        '''
        # 準備改為分頁版本
        total_rows = len(mylist)
        totalpage = math.ceil(total_rows/int(item_per_page))
        starti = int(item_per_page) * (int(page) - 1) + 1
        endi = starti + int(item_per_page) - 1
        notlast = False
        if total_rows > 0:
            outstring += "<br />"
            if (int(page) * int(item_per_page)) < total_rows:
                notlast = True
            if int(page) > 1:
                outstring += "<a href='"
                outstring += "/?page=1&amp;item_per_page="+str(item_per_page)
                outstring += "'><<</a> "
                page_num = int(page) - 1
                outstring += "<a href='"
                outstring += "/?page="+str(page_num)+"&amp;item_per_page="+str(item_per_page)
                outstring += "'>Previous</a> "
            span = 10
            for index in range(int(page)-span, int(page)+span):
                if index>= 0 and index< totalpage:
                    page_now = index + 1 
                    if page_now == int(page):
                        outstring += "<font size='+1' color='red'>"+str(page)+" </font>"
                    else:
                        outstring += "<a href='"
                        outstring += "/?page="+str(page_now)+"&amp;item_per_page="+str(item_per_page)
                        outstring += "'>"+str(page_now)+"</a> "

            if notlast == True:
                nextpage = int(page) + 1
                outstring += " <a href='"
                outstring += "/?page="+str(nextpage)+"&amp;item_per_page="+str(item_per_page)
                outstring += "'>Next</a>"
                outstring += " <a href='"
                outstring += "/?page="+str(totalpage)+"&amp;item_per_page="+str(item_per_page)
                outstring += "'>>></a><br /><br /><br />"
            if (int(page) * int(item_per_page)) < total_rows:
                notlast = True
                outstring += access_list(mylist, starti, endi)+"<br />"
            else:
                outstring += "<br /><br />"
                outstring += access_list(mylist, starti, total_rows)+"<br />"
            if int(page) > 1:
                outstring += "<a href='"
                outstring += "/?page=1&amp;item_per_page="+str(item_per_page)
                outstring += "'><<</a> "
                page_num = int(page) - 1
                outstring += "<a href='"
                outstring += "/?page="+str(page_num)+"&amp;item_per_page="+str(item_per_page)
                outstring += "'>Previous</a> "
            span = 10
            for index in range(int(page)-span, int(page)+span):
                if index >=0 and index < totalpage:
                    page_now = index + 1
                    if page_now == int(page):
                        outstring += "<font size='+1' color='red'>"+str(page)+" </font>"
                    else:
                        outstring += "<a href='"
                        outstring += "/?page="+str(page_now)+"&amp;item_per_page="+str(item_per_page)
                        outstring += "'>"+str(page_now)+"</a> "
            if notlast == True:
                nextpage = int(page) + 1
                outstring += " <a href='"
                outstring += "/?page="+str(nextpage)+"&amp;item_per_page="+str(item_per_page)
                outstring += "'>Next</a>"
                outstring += " <a href='"
                outstring += "/?page="+str(totalpage)+"&amp;item_per_page="+str(item_per_page)
                outstring += "'>>></a>"
        else:
            outstring += "no data!"
            
        return outstring
    #@+node:2014pythonE.20140410091619.2094: *3* default
    @cherrypy.expose
    def default(self, attr='default', *args, **kwargs):
        raise cherrypy.HTTPRedirect("/")
    #@+node:2014pythonE.20140410091619.2358: *3* walkdir
    def walkdir(self):
        realpath = _curdir + file_location
        # (path, title) and the title is the first line of file
        mylist = []
        if os.path.isfile(data_dir+"/filelist.txt"):
            # get mylist from filelist.txt
            with open(data_dir+"/filelist.txt", encoding="utf-8") as json_file:
                mylist = json.load(json_file)
        else:
            # walk directory and save filelist.txt
            writefile = open(data_dir+"/filelist.txt", "w", encoding="utf-8")
            for (path, dirs, files) in os.walk(realpath):
                files_sorted = sorted(files)
                for num in range(len(files_sorted)):
                    file = open(path+"/"+files_sorted[num], encoding="utf-8")
                    title = file.readline()
                    filename = files_sorted[num]
                    # this is not a good way to cut path, but works at this moment
                    mylist.append((path.replace(realpath, ""), filename, title))
            writefile.write(json.dumps(mylist))
            file.close()
            writefile.close()
        # save content of mylist into data file
        return mylist
    #@+node:2014pythonE.20140410091619.2093: *3* content
    @cherrypy.expose
    def content(self, path=None, filename=None, *args, **kwargs):
        try:
            css_setup = '''
    <style type="text/css">
      body {
        line-height: 200%;
        }
    </style>
    '''
            order = 0
            realpath = _curdir + file_location+path
            menu = ""
            mylist = self.walkdir()
            for i in range(len(mylist)):
                list_element = mylist[i]
                if filename in list_element:
                    order = i
            total = len(mylist)
            if order == 0:
                # first page
                num = 1
                menu= "<a href=\"/\">Index</a>&nbsp;&nbsp;&nbsp;<a href=\"/content?path="+str(mylist[num][0])+"&filename="+str(mylist[num][1])+"\">Next</a>"
            elif order == total-1:
                # last page
                num = total-2
                menu= "<a href=\"/content?path="+str(mylist[num][0])+"&filename="+str(mylist[num][1])+"\">Previous</a>&nbsp;&nbsp;&nbsp;<a href=\"/\">Index</a>"
            else:
                # in between
                menu = "<a href=\"/content?path="+str(mylist[order-1][0])+"&filename="+str(mylist[order-1][1])+"\">Previous</a>&nbsp;&nbsp;&nbsp;<a href=\"/\">Index</a>&nbsp;&nbsp;&nbsp;<a href=\"/content?path="+str(mylist[order+1][0])+"&filename="+str(mylist[order+1][1])+"\">Next</a>"
            with open(realpath+"/"+filename, encoding="utf-8") as content_file:
                content = content_file.read()
            return css_setup+menu+"<br /><p><div>"+content+"</div></p><br />"+menu+"<br />"
        except:
            raise cherrypy.HTTPRedirect("/")
    #@-others
    #index.exposed = True

#@-others
########################### 4. 安排啟動設定
# 配合程式檔案所在目錄設定靜態目錄或靜態檔案
application_conf = {'/static':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static"},
        '/downloads':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/downloads"},
        '/images':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/images"}
    }

########################### 5. 在近端或遠端啟動程式
# 利用 Buddha() class 產生案例物件
root = Buddha()
# 假如在 os 環境變數中存在 'OPENSHIFT_REPO_DIR', 表示程式在 OpenShift 環境中執行
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 雲端執行啟動
    application = cherrypy.Application(root, config = application_conf)
else:
    # 近端執行啟動
    '''
    cherrypy.server.socket_port = 8083
    cherrypy.server.socket_host = '127.0.0.1'
    '''
    cherrypy.quickstart(root, config = application_conf)
#@-leo
